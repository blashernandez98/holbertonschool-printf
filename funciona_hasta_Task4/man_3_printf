.TH _printf 3
.SH NAME
_printf
.SH SYNOPSIS
.B #include "main.h"
.TP
.B int _printf(const char *format, ...)
.SH DESCRIPTION
The function _printf() produces output according to a format as described below. _printf() writes output to the standard output stream.
.TP
.B Format of the format string
.TP
 The format string is a character string, beginning and ending in its initial shift state, if any.  The format string is composed of zero or more directives: ordinary characters (not %), which are copied unchanged to the output stream; and conversion specifications, each of which results in fetching zero or more subsequent arguments. Each conversion specification is introduced by the character %, and ends with a conversion specifier.
.TP
The overall syntax of a conversion specification is:
.TP
  %conversion
.TP
The arguments must correspond properly (after type promotion) with the conversion specifier. The arguments are used in the order given and each conversion specifier asks for the next argument (and it is an error if insufficiently many arguments are given).
.TP
.B Conversion specifiers
.TP
The character following the % specifies the type of conversion to be applied. The conversion specifiers and their meaning are:
.TP
.B d, i
Print an integer number.
.TP
.B c
Print a single character.
.TP
.B s
Print a string of characters.
.TP
.B u
Print an unsigned integer.
.TP
.B b
Print a binary number.
.TP
.B o
Print an octal number.
.TP
.B x
Print an hexadecimal number with letters in lowercase.
.TP
.B X
Print an hexadecimal number with letters in uppercase.
.TP
.B %
Print a '%'. The complete conversion specification is '%%'.
.SH RETURN VALUE
Upon successful return, these functions return the number of characters printed (excluding the null byte used to end output to strings). On failure returns -1.
.SH EXAMPLES
.TP
To print the number '43' in decimal base:
_printf("%d", 43);
.TP
To print the number '43' in binary base:
_printf("%b", 43);
.TP
To print a string and a number:
_printf("%s %d", "Blas's lucky number is", 43)
